{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "CFN template to create architecture represented at https://aws.amazon.com/blogs/compute/fanout-s3-event-notifications-to-multiple-endpoints/.",
  "Resources": {
    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {"Fn::Join" : ["", [{"Ref" : "AWS::StackName"}, "-eventarchive-", {"Ref": "AWS::AccountId" }]]},
        "NotificationConfiguration": {
          "TopicConfigurations": [
            {
              "Topic": {
                "Ref": "SNSTopic"
              },
              "Event": "s3:ObjectCreated:*"
            }
          ]
        }
      }
    },
    "S3BucketOut": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {"Fn::Join" : ["", [{"Ref" : "AWS::StackName"}, "-eventarchive-", {"Ref": "AWS::AccountId" }, "-out"]]}
      }
    },
    "SNSTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": "event-manifold-topic",
        "TopicName": "event-manifold-topic",
        "Subscription": [
          {
            "Endpoint": {
              "Fn::GetAtt": [
                "LambdaFunctionOne",
                "Arn"
              ]
            },
            "Protocol": "lambda"
          },
          {
            "Endpoint": {
              "Fn::GetAtt": [
                "LambdaFunctionTwo",
                "Arn"
              ]
            },
            "Protocol": "lambda"
          }
        ]
      }
    },
    "NotificationPolicy": {
      "Type": "AWS::SNS::TopicPolicy",
      "Properties": {
        "PolicyDocument": {
          "Id": "PushBucketNotificationPolicy",
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "AllowBucketToPushNotificationEffect",
              "Effect": "Allow",
              "Principal": {
                "Service": "s3.amazonaws.com"
              },
              "Action": "sns:Publish",
              "Resource": {
                "Ref": "SNSTopic"
              },
              "Condition": {
                "ArnLike": {
                  "aws:SourceArn": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:*:*:",
                        {
                          "Ref": "S3Bucket"
                        }
                      ]
                    ]
                  }
                }
              }
            }
          ]
        },
        "Topics": [
          {
            "Ref": "SNSTopic"
          }
        ]
      }
    },
    "LambdaFunctionOne": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "awslambda-reference-architectures",
          "S3Key": "file-processing/data-processor-1.zip"
        },
        "Description": "Data Processor One",
        "Handler": "data-processor-1.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs",
        "MemorySize": 128,
        "Timeout": 3
      }
    },
    "LambdaFunctionTwo": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "awslambda-reference-architectures",
          "S3Key": "file-processing/data-processor-2.zip"
        },
        "Description": "Data Processor Two",
        "Handler": "data-processor-2.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs",
        "MemorySize": 128,
        "Timeout": 3
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "RolePolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "root",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "arn:aws:logs:*:*:*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:GetObject"
              ],
              "Resource": { "Fn::Join" : [ "", [ "arn:aws:s3:::", {"Ref" : "AWS::StackName"}, "-eventarchive-", {"Ref" : "AWS::AccountId"} , "/*" ]] }
            }
          ]
        },
        "Roles": [
          {
            "Ref": "LambdaExecutionRole"
          }
        ]
      }
    },
    "LambdaPermissionFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "awslambda-reference-architectures",
          "S3Key": "file-processing/add-permission.zip"
        },
        "Description": "Function to add permission SNS publish to specified Lambda fx",
        "Handler": "add-permission.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaPermissionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs",
        "MemorySize": 128,
        "Timeout": 3
      }
    },
    "LambdaPermissionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "LambdaPermissionRolePolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "add-permission-lambda",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "lambda:AddPermission"
              ],
              "Resource": "arn:aws:lambda:*"
            },
  	    {
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents"
                ],
                "Resource": "arn:aws:logs:*:*:*"
  	    },
        {
                "Effect": "Allow",
                "Action": [
                  "s3:PutObject",
                  "s3:GetObject",
                  "s3:DeleteObject"
                ],
                "Resource": "arn:aws:s3:::*/*"
        }]
        },
        "Roles": [
          {
            "Ref": "LambdaPermissionRole"
          }
        ]
      }
    },


    "LambdaPermissionsOne": {
      "Type": "Custom::LambdaPermissionsOne",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt" : ["LambdaPermissionFunction","Arn"]},
        "Region": { "Ref": "AWS::Region" },
        "LambdaFx": { "Ref" : "LambdaFunctionOne" }
      }
    },
    "LambdaPermissionsTwo": {
      "Type": "Custom::LambdaPermissionsTwo",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt" : ["LambdaPermissionFunction","Arn"]},
        "Region": { "Ref": "AWS::Region" },
        "LambdaFx": { "Ref" : "LambdaFunctionTwo" }
      }
    }
  },
  "Outputs": {
    "Bucket": {
      "Description": "Storage location for data which is to be processed by Lambda functions",
      "Value": {
        "Ref": "S3Bucket"
      }
    },
    "BucketOut": {
      "Description": "Storage location for data which is to be processed by Lambda functions",
      "Value": {
        "Ref": "S3BucketOut"
      }
    },
    "Topic": {
      "Description": "SNS topic to fanout S3 Event notifications to Lambda functions",
      "Value": {
        "Ref": "SNSTopic"
      }
    },
    "LambdaFxOne": {
      "Description": "Lambda function receiving SNS messages of S3 events",
      "Value": {
        "Ref": "LambdaFunctionOne"
      }
    },
    "LambdaFxTwo": {
      "Description": "Lambda function receiving SNS messages of S3 events",
      "Value": {
        "Ref": "LambdaFunctionTwo"
      }
    }
  }
}
